name: AREIP CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: areip_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      run: |
        poetry install --no-root
        
    - name: Lint with ruff
      run: poetry run ruff check areip tests
      
    - name: Format check with black
      run: poetry run black --check areip tests
      
    - name: Type check with mypy
      run: poetry run mypy areip
      
    - name: Test with pytest
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: areip_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        poetry run pytest tests/ -v --cov=areip --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        config: bandit.yml
        
    - name: Run Safety Check
      run: |
        pip install safety
        safety check
        
  build-and-deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}
        
    - name: Build and push Docker image
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        IMAGE_NAME: areip
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
        
    - name: Deploy to Cloud Run
      env:
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        SERVICE_NAME: areip-api
        REGION: us-central1
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/areip:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated